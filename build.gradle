/*
 * (C) Copyright 2008-2019 hSenid Software International (Pvt) Limited.
 *
 * All Rights Reserved.
 *
 * These materials are unpublished, proprietary, confidential source code of
 * hSenid Software International (Pvt) Limited and constitute a TRADE SECRET
 * of hSenid Software International (Pvt) Limited.
 *
 * hSenid Software International (Pvt) Limited retains all title to and intellectual
 * property rights in these materials.
 *
 */

buildscript{
    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("${gradle.ext.springBootGroupName}:spring-boot-gradle-plugin:${gradle.ext.springBootVersion}")
        classpath("${gradle.ext.kotlinGroupName}:kotlin-gradle-plugin:${gradle.ext.kotlinVersion}")
        classpath("${gradle.ext.kotlinGroupName}:kotlin-allopen:${gradle.ext.kotlinVersion}")
    }
}

plugins {
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.3.21'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.21'
    id 'application'
}

apply plugin: 'kotlin-jpa'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin-allopen'
apply plugin: 'jacoco'
apply plugin: 'distribution'

application {
    mainClassName = "com.app.kotlinkcrud.KotlinkcrudApplication"
    applicationDefaultJvmArgs = ['-Dgreeting.language=en']
}


allOpen {
    annotation("javax.persistence.Entity")
}

group = 'com.app'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = "${gradle.ext.jvmVersion}"

repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
}

applicationDistribution.from("src/main/resources/") {
    into "config"
}

dependencies {
//    implementation "${gradle.ext.springBootGroupName}:spring-boot-starter-data-jpa"
    implementation "${gradle.ext.springBootGroupName}:spring-boot-starter-thymeleaf"
    implementation "${gradle.ext.springBootGroupName}:spring-boot-starter-web"
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation "${gradle.ext.kotlinGroupName}:kotlin-reflect"
    implementation "${gradle.ext.kotlinGroupName}:kotlin-stdlib-jdk8"
    runtimeOnly "${gradle.ext.springBootGroupName}:spring-boot-devtools"
//    runtimeOnly 'mysql:mysql-connector-java'
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile("io.springfox:springfox-swagger2:${gradle.ext.springfoxVersion}")
    compile("io.springfox:springfox-swagger-ui:${gradle.ext.springfoxVersion}")
    testImplementation("${gradle.ext.springBootGroupName}:spring-boot-starter-test") {
        exclude module: 'junit'
        exclude module: 'mockito-core'
    }
    testImplementation 'com.ninja-squad:springmockk:1.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testCompile 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC3'
    compile("ch.qos.logback:logback-classic:${gradle.ext.logbackVersion}")
    compile("ch.qos.logback:logback-access:${gradle.ext.logbackVersion}")
    testCompile("org.assertj:assertj-core:${gradle.ext.assertJVersion}")
    compile 'com.github.kittinunf.fuel:fuel:2.0.1'
    compile 'com.github.kittinunf.fuel:fuel-gson:2.0.1'
    compile 'com.beust:klaxon:3.0.4'
    runtime files('src/dist/config')
}

noArg {
	annotation("org.springframework.data.mongodb.core.mapping.Document")
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = "${gradle.ext.jvmVersion}"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = "${gradle.ext.jvmVersion}"
    }
}
configurations {
    all {
        exclude group: "${gradle.ext.springBootGroupName}", module: 'spring-boot-starter-logging'
    }
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}

jacoco {
    // You may modify the Jacoco version here
    toolVersion = "0.8.2"
}


jacocoTestReport {
    // Adjust the output of the test report
    reports {
        xml.enabled true
        csv.enabled false
    }
}

bootJar {
    launchScript()
}

jar {
    baseName 'kotlin-crud-application'
    enabled = true
    exclude("application*")
    exclude("static/")
    exclude("logback*")
    exclude("templates/")
}

startScripts {
    classpath += files('src/dist/XxxAPlaceHolderForAConfigxxX')
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\XxxAPlaceHolderForAConfigxxX', '%APP_HOME%\\config')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/XxxAPlaceHolderForAConfigxxX', '$APP_HOME/config')
    }
}





